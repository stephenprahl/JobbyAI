// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// To seed your database, run: bun run db:seed
// The seed script is defined in prisma/seed.ts

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [pgcrypto, citext]
}

enum UserRole {
  USER
  ADMIN
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  TEMPORARY
  INTERNSHIP
  VOLUNTEER
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  UNPAID
}

enum SubscriptionPlan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique @db.Citext
  passwordHash  String
  firstName     String?
  lastName      String?
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  resetTokens   PasswordResetToken[]
  updatedAt     DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)
  lastLoginAt   DateTime?      @map("last_login_at") @db.Timestamptz(6)
  isActive      Boolean        @default(true) @map("is_active")
  emailVerified Boolean        @default(false) @map("email_verified")
  verificationTokens VerificationToken[]

  // Relations
  profile         UserProfile?
  skills          UserSkill[]
  experiences     Experience[]
  education       Education[]
  certifications  Certification[]
  jobListings     JobListing[]
  resumes         UserResume[]
  createdTemplates ResumeTemplate[] @relation("CreatedTemplates")
  subscription      Subscription?
  payments          Payment[]
  paymentMethods    PaymentMethod[]
  usageRecords      UsageRecord[]
  reportedScams     JobScam[]       @relation("ReportedScams")
  verifiedScams     JobScam[]       @relation("VerifiedScams")
  scamWarnings      UserScamWarning[]
  chatSessions      ChatSession[]
  jobApplications   JobApplication[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(uuid())
  token      String   @unique
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("password_reset_tokens")
}

model UserProfile {
  id          String   @id @default(uuid())
  userId      String   @unique @map("user_id")
  headline    String?
  summary     String?  @db.Text
  location    String?
  websiteUrl  String?  @map("website_url")
  linkedinUrl String?  @map("linkedin_url")
  githubUrl   String?  @map("github_url")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Skill {
  id        String      @id @default(uuid())
  name      String      @unique @db.Citext
  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  users     UserSkill[]

  @@map("skills")
}

model UserSkill {
  userId             String    @map("user_id")
  skillId            String    @map("skill_id")
  level              SkillLevel?
  yearsOfExperience  Int?      @map("years_of_experience")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill             Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([userId, skillId])
  @@map("user_skills")
}

model Experience {
  id          String         @id @default(uuid())
  userId      String         @map("user_id")
  title       String
  companyName String         @map("company_name")
  location    String?
  startDate   DateTime       @map("start_date") @db.Date
  endDate     DateTime?      @map("end_date") @db.Date
  current     Boolean        @default(false)
  description String?        @db.Text
  createdAt   DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("experiences")
}

model Education {
  id            String    @id @default(uuid())
  userId        String    @map("user_id")
  institution   String
  degree        String
  fieldOfStudy  String?   @map("field_of_study")
  startDate     DateTime? @map("start_date") @db.Date
  endDate       DateTime? @map("end_date") @db.Date
  gpa           Float?
  description   String?   @db.Text
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("education")
}

model Certification {
  id                    String    @id @default(uuid())
  userId                String    @map("user_id")
  name                  String
  issuingOrganization   String    @map("issuing_organization")
  issueDate             DateTime  @map("issue_date") @db.Date
  expirationDate        DateTime? @map("expiration_date") @db.Date
  credentialId          String?   @map("credential_id")
  credentialUrl         String?   @map("credential_url") @db.VarChar(512)
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("certifications")
}

model JobListing {
  id              String         @id @default(uuid())
  userId          String         @map("user_id")
  title           String
  companyName     String         @map("company_name")
  location        String?
  description     String?        @db.Text
  requirements    String[]
  employmentType  EmploymentType? @map("employment_type")
  source          String?
  url             String?        @db.VarChar(512)
  applied         Boolean        @default(false)
  applicationDate DateTime?      @map("application_date") @db.Date
  status          String?
  notes           String?        @db.Text
  createdAt       DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("job_listings")
}

enum ScamSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ScamStatus {
  REPORTED
  VERIFIED
  DISMISSED
  UNDER_REVIEW
}

model JobScam {
  id              String         @id @default(uuid())
  reportedById    String         @map("reported_by_id")
  title           String
  companyName     String         @map("company_name")
  location        String?
  description     String?        @db.Text
  url             String?        @db.VarChar(512)
  email           String?
  phone           String?
  salary          String?
  employmentType  String?        @map("employment_type")
  scamType        String         @map("scam_type") // e.g., "fake_company", "identity_theft", "payment_scam", "fake_position"
  severity        ScamSeverity   @default(MEDIUM)
  status          ScamStatus     @default(REPORTED)
  evidenceUrls    String[]       @map("evidence_urls") // Screenshots, links, etc.
  notes           String?        @db.Text
  verifiedAt      DateTime?      @map("verified_at") @db.Timestamptz(6)
  verifiedById    String?        @map("verified_by_id")
  warningCount    Int            @default(0) @map("warning_count") // How many users have been warned
  createdAt       DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  reportedBy      User           @relation("ReportedScams", fields: [reportedById], references: [id], onDelete: Cascade)
  verifiedBy      User?          @relation("VerifiedScams", fields: [verifiedById], references: [id], onDelete: SetNull)
  userWarnings    UserScamWarning[]

  @@map("job_scams")
}

model UserScamWarning {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  scamId    String   @map("scam_id")
  warnedAt  DateTime @default(now()) @map("warned_at") @db.Timestamptz(6)
  dismissed Boolean  @default(false)

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  scam      JobScam  @relation(fields: [scamId], references: [id], onDelete: Cascade)

  @@unique([userId, scamId])
  @@map("user_scam_warnings")
}

model ResumeTemplate {
  id          String      @id @default(uuid())
  name        String
  description String?     @db.Text
  templateHtml String     @map("template_html") @db.Text
  templateCss String?     @map("template_css") @db.Text
  isPublic    Boolean     @default(false) @map("is_public")
  createdById String?     @map("created_by")
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  createdBy   User?       @relation("CreatedTemplates", fields: [createdById], references: [id], onDelete: SetNull)
  resumes     UserResume[]

  @@map("resume_templates")
}

model UserResume {
  id          String         @id @default(uuid())
  userId      String         @map("user_id")
  templateId  String?        @map("template_id")
  title       String
  content     Json           @db.JsonB
  isPublic    Boolean        @default(false) @map("is_public")
  deletedAt   DateTime?      @map("deleted_at") @db.Timestamptz(6)
  createdAt   DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  template    ResumeTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  jobApplications JobApplication[]

  @@map("user_resumes")
}

model Subscription {
  id                    String             @id @default(uuid())
  userId                String             @unique @map("user_id")
  plan                  SubscriptionPlan   @default(FREE)
  status                SubscriptionStatus @default(TRIAL)
  currentPeriodStart    DateTime?          @map("current_period_start") @db.Timestamptz(6)
  currentPeriodEnd      DateTime?          @map("current_period_end") @db.Timestamptz(6)
  trialStart            DateTime?          @map("trial_start") @db.Timestamptz(6)
  trialEnd              DateTime?          @map("trial_end") @db.Timestamptz(6)
  cancelAtPeriodEnd     Boolean            @default(false) @map("cancel_at_period_end")
  canceledAt            DateTime?          @map("canceled_at") @db.Timestamptz(6)
  autoRenew             Boolean            @default(true) @map("auto_renew")
  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime           @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments              Payment[]
  usageRecords          UsageRecord[]

  @@map("subscriptions")
}

model Payment {
  id                    String        @id @default(uuid())
  userId                String        @map("user_id")
  subscriptionId        String?       @map("subscription_id")
  transactionId         String?       @unique @map("transaction_id")
  paymentMethodId       String?       @map("payment_method_id")
  amount                Int           // Amount in cents
  currency              String        @default("usd")
  status                PaymentStatus @default(PENDING)
  description           String?
  cardLast4             String?       @map("card_last4")
  cardBrand             String?       @map("card_brand")
  billingAddress        Json?         @map("billing_address") @db.JsonB
  metadata              Json?         @db.JsonB
  processedAt           DateTime?     @map("processed_at") @db.Timestamptz(6)
  createdAt             DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription          Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

  @@map("payments")
}

model PaymentMethod {
  id                    String        @id @default(uuid())
  userId                String        @map("user_id")
  type                  String        // 'card'
  cardLast4             String        @map("card_last4")
  cardBrand             String        @map("card_brand")
  cardExpMonth          Int           @map("card_exp_month")
  cardExpYear           Int           @map("card_exp_year")
  cardHolderName        String?       @map("card_holder_name")
  billingAddress        Json?         @map("billing_address") @db.JsonB
  isDefault             Boolean       @default(false) @map("is_default")
  isActive              Boolean       @default(true) @map("is_active")
  encryptedCardToken    String        @map("encrypted_card_token") // Encrypted card token for processing
  createdAt             DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

model UsageRecord {
  id               String       @id @default(uuid())
  userId           String       @map("user_id")
  subscriptionId   String       @map("subscription_id")
  feature          String       // e.g., 'resume_generation', 'job_analysis', 'api_calls'
  usage            Int          @default(0)
  limit            Int?         // null means unlimited
  resetDate        DateTime     @map("reset_date") @db.Timestamptz(6)
  createdAt        DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime     @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription     Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([userId, subscriptionId, feature])
  @@map("usage_records")
}

// Models for AI scam detection and platform protection
model BannedCompany {
  id          String   @id @default(uuid())
  companyName String   @unique @map("company_name")
  reason      String   @db.Text
  bannedAt    DateTime @default(now()) @map("banned_at") @db.Timestamptz(6)
  bannedBy    String   @map("banned_by") // user ID or 'ai-system'
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("banned_companies")
}

model BannedUrl {
  id        String   @id @default(uuid())
  url       String   @unique @db.VarChar(512)
  reason    String   @db.Text
  bannedAt  DateTime @default(now()) @map("banned_at") @db.Timestamptz(6)
  bannedBy  String   @map("banned_by") // user ID or 'ai-system'
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("banned_urls")
}

model BannedEmail {
  id        String   @id @default(uuid())
  email     String   @unique
  reason    String   @db.Text
  bannedAt  DateTime @default(now()) @map("banned_at") @db.Timestamptz(6)
  bannedBy  String   @map("banned_by") // user ID or 'ai-system'
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("banned_emails")
}

model FlaggedJob {
  id            String   @id @default(uuid())
  title         String
  companyName   String   @map("company_name")
  description   String?  @db.Text
  url           String?  @db.VarChar(512)
  contactEmail  String?  @map("contact_email")
  flaggedReason String   @map("flagged_reason") @db.Text
  aiConfidence  Float    @map("ai_confidence") // 0.0 to 1.0
  reviewed      Boolean  @default(false)
  reviewedAt    DateTime? @map("reviewed_at") @db.Timestamptz(6)
  reviewedBy    String?  @map("reviewed_by")
  reviewAction  String?  @map("review_action") // 'approved', 'banned', 'needs_more_review'
  flaggedAt     DateTime @default(now()) @map("flagged_at") @db.Timestamptz(6)
  flaggedBy     String   @map("flagged_by") // user ID or 'ai-system'
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("flagged_jobs")
}

// Chat assistant models
model ChatSession {
  id          String        @id @default(uuid())
  userId      String        @map("user_id")
  title       String        @db.VarChar(200)
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id            String        @id @default(uuid())
  sessionId     String        @map("session_id")
  role          String        // 'user' or 'assistant'
  content       String        @db.Text
  attachments   Json?         @db.JsonB
  timestamp     DateTime      @default(now()) @db.Timestamptz(6)
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  session       ChatSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model JobApplication {
  id              String        @id @default(uuid())
  userId          String        @map("user_id")
  jobTitle        String        @map("job_title")
  companyName     String        @map("company_name")
  jobUrl          String        @map("job_url") @db.VarChar(512)
  platform        String        // 'linkedin', 'indeed', 'glassdoor', etc.
  resumeId        String?       @map("resume_id")
  status          String        @default("pending") // 'pending', 'applying', 'applied', 'failed'
  appliedAt       DateTime?     @map("applied_at") @db.Timestamptz(6)
  response        String?       @db.Text
  notes           String?       @db.Text
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  resume          UserResume?   @relation(fields: [resumeId], references: [id])

  @@map("job_applications")
}
